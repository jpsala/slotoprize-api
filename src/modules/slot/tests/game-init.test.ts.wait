/* eslint-disable no-loop-func */
/* eslint-disable babel/no-unused-expressions */
/* eslint-disable no-undef */
import supertest from 'supertest'
import chai, {expect} from 'chai'
import createApp from "../../../app"
import {verifyToken} from '../../../services/jwtService'
import {settingGet} from "../slot.services/settings.service"
import {getWallet} from '../slot.services/wallet.service'
import {delUser} from '../../meta/meta.repo/game-user.repo'


chai.config.showDiff = false
chai.config.includeStack = false
const app = createApp()

const devices = [{id: 'borrar1', isNew: false}, {id: 'noExiste', isNew: true}]
for (const device of devices)
  describe(`GET /api/slot/game_init?deviceId=${device.id} (usuario ${device.isNew ? 'INexistente' : 'Existente'})`, () => {
    let resp
    before(async () => {
      if(device.id === 'noExiste') await delUser('noExiste')
      resp = await supertest(app).get(`/api/slot/game_init?deviceId=${device.id}`) as any
    })
    it('status === 200', () => {
      expect(resp.status).to.equal(200)
    })
    let sessionToken
    it('sessionToken to be valid ', () => {
      expect(resp.body, 'to have sessionToken prop in the body').to.have.property('sessionId')
      sessionToken = resp.body.sessionId
      expect(sessionToken, 'sessionToken must be an string and not be empty').to.be.an('string').to.be.not.empty
      expect(sessionToken?.length, 'sessionToken must be bigger than 100').to.gt(100)
    })
    it('decodeToken throw no errors', () => {
      const {error} = verifyToken(sessionToken as string)
      expect(error, 'error from verifyToken').to.be.undefined
    })
    it(`decodedToken.deviceId === "${device.id}"`, () => {
      const {decodedToken} = verifyToken(sessionToken as string)
      expect(decodedToken.deviceId).to.be.eq(device.id)
    })
    it('requireProfileData is 1 or 0', () => {
      expect(resp.body.requireProfileData, 'requireProfileData is 1 or 0').to.be.within(0, 1)
    })
    describe('properties of profileData', () => {
      const props = ['firstName', 'lastName', 'email', 'deviceName', 'deviceModel', 'age', 'phoneCode', 'phoneNumber', 'languageCode', 'countryPhoneCode', 'isMale', 'address', 'zipCode', 'state', 'country', 'city', 'isNew']
      props.forEach((prop) => {
        it(`profileData to have prop ${prop}`, () => {
          expect(resp.body.profileData).to.have.property(prop)
        })
      })
    })
    it('languageCode to be en-US', () => {
      expect(resp.body.languageCode, 'languageCode to be en-US').to.be.eq('en-US')
    })
    it('ticketPrice to be equal to the setting', async () => {
      const ticketPrice = await settingGet('ticketPrice', '2')
      expect(resp.body.ticketPrice).to.be.eq(Number(ticketPrice))
    })
    it('betPrice to be equal to the setting', async () => {
      const betPrice = await settingGet('betPrice', '2')
      expect(resp.body.betPrice).to.be.eq(Number(betPrice))
    })
    it('maxMultiplier to be equal to the setting', async () => {
      const maxMultiplier = await settingGet('maxMultiplier', '2')
      expect(resp.body.maxMultiplier).to.be.eq(Number(maxMultiplier))
    })
    it('languagesData to be an array', () => {
      expect(resp.body.languagesData, 'languagesData to be an array').to.be.an('array')
    })
    it('languagesData.length > 0', () => {
      expect(resp.body.languagesData, 'languagesData.length to be > 0').to.be.length.gt(0)
    })
    it('languagesData[0].languageCode === "en-US"', () => {
      expect(resp.body.languagesData[0].languageCode, 'languagesData[0].languageCode === "en-US"').to.be.eq('en-US')
    })
    it(`isNew to be ${device.isNew}`, () => {
      expect(resp.body.profileData.isNew, 'profileData.isNew to be false').to.be.eq(device.isNew)
    })
    it('walletData to have coins and tickets', () => {
      expect(resp.body.walletData, 'to have prop coins').to.have.property('coins')
      expect(resp.body.walletData, 'to have prop tickets').to.have.property('tickets')
    })
    if (device.isNew)
      it('walletData to have coins and tickets equal to initialWalletTickets and initialWalletCoins', async () => {
        const coins = Number(await settingGet('initialWalletTickets', 1))
        const tickets = Number(await settingGet('initialWalletCoins', 1))
        expect(resp.body.walletData.coins, '.to.be.eq(coins)').to.be.eq(coins)
        expect(resp.body.walletData.tickets, '.to.be.eq(tickets)').to.be.eq(tickets)
      })
    else
      it('walletData to have coins and tickets equal as his wallet', async () => {
        const wallet = await getWallet(device.id)
        const {coins, tickets} = wallet
        expect(resp.body.walletData.coins, '.to.be.eq(coins)').to.be.eq(coins)
        expect(resp.body.walletData.tickets, '.to.be.eq(tickets)').to.be.eq(tickets)
      })
    it('reelsData to be an array ', () => {
      expect(resp.body.reelsData).to.be.an('array')
    })
    it('reelsData to have 3 elements ', () => {
      expect(resp.body.reelsData).to.have.length(3)
    })
    it('reelsData first element to have prop symbolsData', () => {
      expect(resp.body.reelsData[0]).to.have.property('symbolsData')
    })
    it('resp.body.reelsData[0].symbolsData is an array', () => {
      expect(resp.body.reelsData[0].symbolsData).to.be.an('array')
    })
    it('resp.body.reelsData[0].symbolsData[0] to have property textureUrl', () => {
      expect(resp.body.reelsData[0].symbolsData[0]).to.have.property('textureUrl')
    })
  })


